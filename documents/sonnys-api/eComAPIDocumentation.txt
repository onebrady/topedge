openapi: 3.0.0
info:
  title: ECommerce API
  description: >
    # Sonnys Carwash Controls ECommerce Client API.


    This API was documented in **OpenAPI Format** and will provide the endpoints
    necessary to properly

    performing purchases with the ECommerce application that is available for
    you with Sonnys Controls BackOffice.

    # Nomenclature

    Through the documentation a few words will have special meaning and should be understood as follows:

    - Client: The carwash location

    - Customer: A customer from the carwash

    - API Key: A unique `secret/password` that is given to grant access to the API. This should always be treated as
      a `password`.

    - API ID: A unique identifier that is given to grant access to the API. Used in conjunction with the API Key.

    - Customer ID: A unique identifier that is given to each customer created through the API.

    - Customer Token/Secret: A unique `secret` that is given to each customer at the moment of creation. This should
      be treated as a `password` and it is not `re-generated`.


    # Authentication


    Every endpoint available for this API requires:

      - A valid license: Licensing is required for the API to function.

      - The X-Sonnys-API-Key: A `secret\password` exclusively to access the API.

      - The X-Sonnys-API-Id: A unique identifier for your API access.

    This information should be passed in *Header* and not passing this information will automatically return a not
    authorized response. The same is valid for the customer authentication that is described below.

    ```
      HTTP status code of *403*: Not Authorized.
    ```

    ## Customer Authentication

    Endpoints that are related to a customer will require that the customer identification and secret key is sent
    through headers.

    The customer identifier is an alphanumeric string that uniquely identifies the customer, such as, `98745:1002`
    and the secret token is an alphanumeric string that should be treated as a `secret/password` for that customer.
    It will be hashed/encrypted string, like, for example `f3a484945d3e83717142010f736bc5f1`

    Along with the X-Sonnys-API-Key and X-Sonnys-API-Id the following headers are required:

    - X-Sonnys-Customer-Token

    - X-Sonnys-Customer-Id


    # SSL Only


    The API will only accept requests that are done under a SSL layer. Any
    request not done under this layer will

    be automatically refused.


    # Throttling

    The E-Commerce API uses a throttling mechanism to ensure that each API consumer has the same amount of
    requests in a given period. This mechanism allows an application consuming the API to perform 20 requests in
    a block of 15 seconds.
    
    The throttling works as follows. When the first reply occurs, the API will start a counter, for the
    X-Sonnys-API-Id, at 1 with an expiration of 15 seconds. Each subsequent request will increase that counter.
    Serving more than 20 requests in this time frame, the E-Commerce Data API will throw an exception resulting
    in an HTTP 429 status.
    
    ```
    HTTP status code of *429*: Too Many Requests.
    ```
    
    ## Example:
    
    A Request to the transaction/list endpoint at 2022-07-14 at 13:53:00 UTC. The counter will be increased to one
    and have its expiration set for 2022-07-14 at 13:53:15 UTC. For each request to the API, it will increase
    the counter by 1. If 21 requests are made before 2022-07-14 at 13:53:15 UTC, it will throw an exception;
    otherwise, the API will reset the counter and time.


    # Validation


    Endpoints that information is posted will have the payload validated and
    only a valid payload will be processed.


    # Code Samples


    All code samples were made using Guzzle library as a reference. The choice of Guzzle was on `readability` and
    the way that it made the samples more readable. The library used to perform requests to the API is completely up
    to the development team working with it.


    For more information on Guzzle: http://docs.guzzlephp.org/en/stable/


    # API Responses


    The API will return a HTTP status code of `200` whenever the request was successful, otherwise either one of
    the `400` series, or 500 series codes will be returned. The HTTP status codes that we are using as a reference are
    listed on Wikipedia: https://en.wikipedia.org/wiki/List_of_HTTP_status_codes


    * `2xx (Successful)`: The request was successfully received, understood, and
    accepted

    * `4xx (Client Error)`: The request contains bad syntax or cannot be fulfilled

    * `5xx (Server Error)`: The server failed to fulfill an apparently valid
    request


    # Error Types


    The following error codes are returned among the error messages as part of
    the response payload.


    ## RequestRateExceededError: API request rate limit exceeded


    The API holds a counter for each request reply in a given endpoint. This
    error will be returned when the request

    count is higher than the amount allowed on the API throttle. For more
    information on how throttling refer to the

    **Throttling** section above.

    ## PayloadValidationError: Payload validation failure


    The request payload is well formed however the values passed does not
    match the parameter criteria. Each

    parameter is validated individually and will have at least one possible
    validation error message.


    ## InvalidPayloadRequestTimestampError: Invalid payload request timestamp


    Each API request is validated by a timestamp. The request timestamp sent
    from the requestor must not be more than

    5 minutes from the it's acceptance on the API.


    ## MissingClientCredentialsError: Missing client information


    All API requests requires that a X-Sonnys-API-ID and X-Sonnys-API-Key are sent in the headers. Not sending this
    information will generate an authorization error and return this error code.

    ## BadClientCredentialsError: Invalid client information


    All API requests requires that a X-Sonnys-API-ID is sent in the headers along
    with the X-Sonnys-API-Key. Either an invalid X-Sonnys-API-ID or X-Sonnys-API-Key will generate this error.

    ## MissingCustomerCredentialsError: Missing customer information


    All API requests requires that X-Sonnys-Customer-Token is sent in the headers for
    endpoints that the customer information is required. Not sending this token along with the customer
    identification on the body of the request will return a not authorized error.

    Customer endpoints requires the X-Sonnys-API-Key and X-Sonnys-API-Id to be sent as well.

    ## BadCustomerCredentialsError: Invalid customer information

    Some endpoints requires that customer information X-Sonnys-Customer-Token and X-Sonnys-Customer-Id are sent in the headers.
    This error will be returned when the information sent is invalid and it will generate a not authorized error.

    Customer endpoints requires the X-Sonnys-API-Key and X-Sonnys-API-Id to be sent as well.

    ## NotAuthorizedError: Access not authorized

    This error is returned whenever the information required for authentication is not sent, is invalid or the requestor
    does not have proper licensing.

    ## EntityNotFoundError: The requested entity could not be found

    This error is returned whenever a given inquiry returns no results.

    ## UnexpectedFailure: Api unexpected failure


    This error covers any other type of failure regarding the internal API
    logic.

    ## ServerUnexpectedFailure: An unexpected server response

    This error will cover any error response that was not expected by the API. This error will try, whenever possible,
    to pass a reference code that can be used to communicate with helpdesk.

    # Endpoints

  version: 1.9.0
  contact:
    email: controlshelpdesk@sonnysdirect.com
    name: Helpdesk
  license:
    name: Sonnys Carwarsh Controls Client API License

servers:
  - url: 'https://sandboxapi.mywashaccount.com/v1'
    description: >-
      Main sandbox server. This server should be used to test your api
      integration against possible responses from the endpoints. Live data is
      not available. Similar to the production server, all endpoints requires
      authentication information to be passed through the header.
  - url: 'https://ecommapi.mywashaccount.com/v1'
    description: >-
      Main production server. This server should be used to integrate your cart
      with production live data. All endpoints requires authentication
      information to be passed through the header. Authentication is provided by
      helpdesk.

tags:
  - name: Shop
    description: >-
      All endpoints under this group are necessary to properly perform a payment
      of an cart order with the API.
  - name: User
    description: >-
      All endpoints under this group are related to actions performed by an user
      such as updating a credit card or the user profile.
  - name: Inventory
    description: >-
      All endpoints under this group are used to retrieve inventory that is
      authorized to be sold on ecommerce and can be properly checkout through
      the API.
  - name: Club-Plan-Actions
    description: >-
      All endpoints under this group are used to manage an user recurring plan.
      Actions such as upgrading or downgrading the recurring plan.
  - name: Orders
    description: >-
      All endpoints under this group are used to visualize details about
      customer orders done either on the ecommerce site or on the Carwash.

components:

  responses:

    EmptySuccessResponse:
      description: A successful response that does not contain a body.
      content:
        application/json:
          schema:
            type: object

    ServerErrorResponse:
      description: The server or the application returned an unexpected error.
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/ServerUnexpectedFailure'

    RateExceededResponse:
      description: The number of requests to the API has exceeded the limited amount.
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/RequestRateExceedError'

    NotAuthorizedResponse:
      description: >-
        Required authentication information has not been given and the request
        has been blocked.
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/NotAuthorizedError'
              - $ref: '#/components/schemas/MissingClientCredentialsError'
              - $ref: '#/components/schemas/BadClientCredentialsError'
              - $ref: '#/components/schemas/MissingCustomerCredentialsError'
              - $ref: '#/components/schemas/BadCustomerCredentialsError'


    EntityNotFoundResponse:
      description: >-
        The requested entity was not found.
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/EntityNotFoundError'

    BadRequestResponse:
      description: >-
        The server cannot or will not process the request due to an apparent client error
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/UnexpectedFailure'
              - $ref: '#/components/schemas/InvalidPayloadRequestTimestampError'

    PayloadValidationErrorResponse:
      description: >-
        Unprocessable Entity. The request has validation errors and could not be processed.
      content:
        application/json:
          schema:
            type: object
            oneOf:
              - $ref: '#/components/schemas/PayloadValidationError'

  parameters:

    CustomerTokenHeaderParameter:
      name: X-Sonnys-Customer-Token
      in: header
      description: >-
        A unique secret for each customer that is given when the customer was created.
        Requires the `customer Id` to be present on the request body. This is a `secret` and should be treated as such.
      schema:
        type: string
      required: true
      nullable: false
      example: "customer-unique-token-here"

    ApiKeyHeaderParameter:
      name: X-Sonnys-API-Key
      in: header
      description: >-
        The unique API key given to access the API endpoints. Requires the `X-Sonnys-API-ID` is present in header.
        This key is a `secret` and should be treated as such. `Required` for every request.
      schema:
        type: string
      required: true
      nullable: false
      example: "your-api-key-here"

    ApiIdHeaderParameter:
      name: X-Sonnys-API-ID
      in: header
      description: >-
        This is the unique client identifier to gain access ot the API. It requires the `X-Sonnys-API-Key` present on
        the header. `Required` for every request.
      schema:
        type: string
      required: true
      nullable: false
      example: "your-api-id-here"

    CollectionLimitParameter:
      name: limit
      in: path
      description: The items returned limit for a given collection
      minimum: 1
      maximum: 100
      required: true
      schema:
        type: integer

    CollectionOffsetParameter:
      name: offset
      in: path
      description: The items returned offset for a given collection
      minimum: 1
      required: true
      schema:
        type: integer

    RecurringIdParameter:
      name: recurring_id
      in: path
      description: >-
        The unique identifier associated with the washbook account that is tied to a recurring plan.
      schema:
        $ref: '#/components/schemas/EntityIdentifier'

    WashBookIdParameter:
      name: washbook_id
      in: path
      schema:
        $ref: '#/components/schemas/EntityIdentifier'

    GiftCardIdParameter:
      name: giftcard_id
      in: path
      schema:
        $ref: '#/components/schemas/EntityIdentifier'

    OrderIdParameter:
      name: order_id
      in: path
      schema:
        $ref: '#/components/schemas/EntityIdentifier'

    ReceiptIdParameter:
      name: receipt_id
      in: path
      schema:
        $ref: '#/components/schemas/EntityIdentifier'

    CustomerIdParameter:
      name: customer_id
      in: path
      description: >-
        The unique identifier associated with the customer. Requires the `X-Sonnys-Customer-Token` to be present in the header.
      schema:
        $ref: '#/components/schemas/EntityIdentifier'

    TokenParameter:
      name: token_id
      in: path
      description: >-
        A temporary token granted to access the resource. This Token will expire in `15 minutes` from the moment of its
        creation.
      schema:
        $ref: '#/components/schemas/UniqueToken'

  schemas:

    EntityIdentifier:
      description: The unique identifier for a specific entity.
      type: string
      pattern: ^\d+:\d+$
      example: 45678:1001
      required: true
      nullable: false
      minLength: 3
      maxLength: 255

    UniqueToken:
      description: >-
        A temporary token that is generated to grant access to a given resource. This resource will have a lifespan
        of `15 minutes`.
      type: string
      minLength: 1
      maxLength: 255
      example: your_unique_token_hash

    PendingOrder:
      description: >-
        A pending order identifier that should be used with the process payment endpoints. This resource will have a lifespan
        of `15 minutes`.
      type: object
      properties:
        token:
          type: string
          minLength: 1
          maxLength: 255
          example: pending_order_token_hash
        expiresAt:
          type: string
          format: date-time
          description: The date & time when token will expire.
          example: '2018-12-12T21:33:07.909Z'
        skipTrialPriceForRecurring:
          type: boolean
          description: When `true` the trial price will not apply to the recurring item at checkout.
            When `false` the trial price will apply to the recurring item at checkout.
          example: false

    DetailedPendingOrder:
      description: >-
        A pending order identifier that should be used with the process payment endpoints. This resource will have a lifespan
        of `15 minutes` and the transaction billing information.
      allOf:
        - $ref: '#/components/schemas/PendingOrder'
      type: object
      properties:
        totalAmount:
          type: number
          format: float
          minimum: 0.0
          example: 44.95
          nullable: false
          description: Will return the total amount of the order before including discounts and taxes.
        subTotal:
          type: number
          format: float
          minimum: 0.0
          example: 40.95
          nullable: false
          description: >-
            Will hold the sub-total amount that will be paid in the time of purchase after applying discount and taxes.
        totalTax:
          type: number
          format: float
          minimum: 0.0
          example: 3.95
          nullable: false
          description: The amount of taxes being charged to the order.
        proratedDiscountAmount:
          type: number
          format: float
          minimum: 0.0
          example: 30.95
          nullable: false
          description: The prorate discount amount applyed to the order if Recurring Billing Day setting is enabled.
        proratedDays:
          type: number
          format: integer
          minimum: 0
          maximum: 5
          example: 2
          nullable: false
          description: >-
            The prorated days applied to the order in time of purchase if Recurring Billing Day setting is enabled.

    RecurringAddTagResponse:
      description: >-
        A response for adding a vehicle/rfid tag to a prepaid account.
      type: object
      properties:
        orderId:
          type: string
          minLength: 1
          maxLength: 50
          example: 123:999
          nullable: true
        tags:
          type: array
          items:
            type: object
            properties:
              tagNumber:
                type: number
                example: 123456789
                minimum: 0
                maximum: 99999999999999
          nullable: false

    RecurringActivateTagResponse:
      description: >-
        A response for activating a cancelled tag to a prepaid account.
      type: object
      properties:
        orderId:
          type: string
          minLength: 1
          maxLength: 50
          example: 123:999
          nullable: true

    BaseError:
      description: The base error object parent to all documented errors.
      type: object
      required:
        - type
      properties:
        type:
          description: >-
            The specific error type. The client *SHOULD* use this value to
            determine which type of error is provided.
          type: string
          example: NotAuthorizedError
          enum:
            - RequestRateExceedError
            - PayloadValidationError
            - InvalidPayloadRequestTimestampError
            - BadClientCredentialsError
            - MissingClientCredentialsError
            - BadCustomerCredentialsError
            - MissingCustomerCredentialsError
            - EntityNotFoundError
            - NotAuthorizedError
            - UnexpectedFailure
            - ServerUnexpectedFailure

    RequestRateExceedError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            The API holds a counter for each request reply in a given endpoint.
            This error will be returned when the request count is higher than
            the amount allowed on the API throttle.
          example: RequestRateExceedError
          type: string
          enum:
            - RequestRateExceedError
        message:
          type: string
          example: >-
            The number of requests exceeded the allowed API rate. Request
            blocked.

    ValidationErrorMessage:
      type: object
      additionalProperties:
        type: string
      example:
        customerFirstName: Must be a string between 1 and 32 characters.
        receiptId: "Does not match the regex pattern ^\\d+:\\d+$"

    PayloadValidationError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            The request payload is well formed however the values passed does not match the parameter criteria. Each
            parameter is validated individually and will have at least one possible validation error message.
          example: PayloadValidationError
          type: string
          enum:
            - PayloadValidationError
        messages:
          type: array
          $ref: '#/components/schemas/ValidationErrorMessage'

    InvalidPayloadRequestTimestampError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            Each API request is validated by a timestamp. The request timestamp sent from the requester must not be
            more than 5 minutes from the it's acceptance on the API.
          example: InvalidPayloadRequestTimestampError
          type: string
          enum:
            - InvalidPayloadRequestTimestampError
        message:
          type: string
          example: The time difference from the request and API is over 5 minutes.

    MissingClientCredentialsError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            One or more of the required header authentication information was not sent on the request. Please verify
            the required information from the endpoint and attempt again. Error persisting, please contact helpdesk.
          example: MissingClientCredentialsError
          type: string
          enum:
            - MissingClientCredentialsError
        message:
          type: string
          example: One or more of the required header authentication information was not sent on the request.

    BadClientCredentialsError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            The information required for authentication has been sent but the credentials are not valid. Please verify
            and attempt again. If the error persists, please contact Helpdesk.
          example: BadClientCredentialsError
          type: string
          enum:
            - BadClientCredentialsError
        message:
          type: string
          example: The information required for authentication has been sent but the credentials are not valid.

    MissingCustomerCredentialsError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            Customer endpoints requires authentication information specific for that customer. This error will be
            returned whenever this required information is missing.
          example: MissingCustomerCredentialsError
          type: string
          enum:
            - MissingCustomerCredentialsError
        message:
          type: string
          example: One or more of the required header customer authentication information was not sent on the request.

    BadCustomerCredentialsError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            The information required for customer authentication has been sent but they are not valid. Please verify
            and attempt again. If the error persists, please contact Helpdesk.
          example: BadCustomerCredentialsError
          type: string
          enum:
            - BadCustomerCredentialsError
        message:
          type: string
          example: The information required for customer authentication has been sent but the credentials are not valid.

    NotAuthorizedError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            The authorization request is well formed and information has been properly sent but this set of api key
            and id is not authorized for access.
          example: BadClientCredentialsError
          type: string
          enum:
            - BadClientCredentialsError
        message:
          type: string
          example: Unauthorized access. Please verify information sent or contact helpdesk.

    EntityNotFoundError:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            The resource searched for was not found.
          example: EntityNotFoundError
          type: string
          enum:
            - EntityNotFoundError
        message:
          type: string
          example: The Recurring Plan searched for was not found.

    UnexpectedFailure:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            This error covers any other type of failure regarding the internal logic.
          example: UnexpectedFailure
          type: string
          enum:
            - UnexpectedFailure
        message:
          type: string
          example: An unexpected error has occurred.


    ServerUnexpectedFailure:
      allOf:
        - $ref: '#/components/schemas/BaseError'
      type: object
      properties:
        type:
          description: >-
            This error covers any other type of failure regarding the internal logic.
          example: ServerUnexpectedFailure
          type: string
          enum:
            - ServerUnexpectedFailure
        message:
          type: string
          example: An unexpected error has occurred.
        code:
          type: string
          example: SCEC0001
          description: >-
            A string that will uniquely identify that specific error that has occurred. This can be used as a reference
            for communication and troubleshooting the issue.

    EmptyArrayObject:
      type: string
      nullable: true
      example: []
      description: >-
        This object will be used to represent responses or scenarios where an
        empty array will be returned.

    AddressObject:
      type: object
      description: >-
        A simple object representing a location address. This object is common
        among objects such as locations, user and billing.
      properties:
        address1:
          type: string
          example: 5605 Hiatus Rd.
          minLength: 1
          maxLength: 50
        address2:
          type: string
          example: ""
          minLength: 0
          maxLength: 50
        city:
          type: string
          example: Tamarac
          minLength: 1
          maxLength: 50
        state:
          type: string
          example: FL
          description: A state code formed by 2 letters. Min and Max of 2.
          pattern: ^[A-Z]{2}$
        postalCode:
          type: string
          example: "33321"
          description: A valid postal code. Numbers only. Min of 5 and max of 8.
          pattern: ^[0-9]{5}(?:-[0-9]{4})?$
        phone:
          type: string
          example: "9547204100"
          description: A valid US telephone number.
          nullable: true
          pattern: ^[0-9]{10}$
      required:
        - address1
        - city
        - state
        - postalCode

    CarwashLocationObjectShort:
      type: object
      description: >-
        A object to represent the carwash location association with a given
        product.
      properties:
        siteCode:
          type: string
          example: MAIN
          nullable: false
          minLength: 3
          maxLength: 4
        taxRate:
          type: number
          example: 0.07
          nullable: true
          minimum: 0.01
          maximum: 99.99

    CarWashRecurringLocationObjectShort:
      type: object
      allOf:
        - $ref: '#/components/schemas/CarwashLocationObjectShort'
      description: >-
        A object to represent the car wash location association with a given recurring product.
      properties:
        additionalFeeRate:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/AdditionalFeeRate'
        retailPrice:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/RetailPrice'

    CarwashLocationObject:
      type: object
      description: >-
        This object represents a carwash location where a product that is sold
        on ecommerce an be used/redeemed.
      properties:
        name:
          type: string
          example: Sonnys Controls Carwash
          description: The name of the Carwash Location
          nullable: false
          minLength: 1
          maxLength: 45
        address:
          $ref: '#/components/schemas/AddressObject'
          nullable: false
        siteCode:
          type: string
          example: MAIN
          nullable: false
          minLength: 3
          maxLength: 4
        taxRates:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "DEFAULT TAX"
              rate:
                type: number
                example: 0.07
                minimum: 0.01
                maximum: 99.99


    GiftCardObject:
      type: object
      description: >-
        A object to represent a Gift Card that is available to be sold through
        the ecommerce API.
      properties:
        id:
          type: string
          example: '2:1001'
          description: An unique identifier associated with the object.
          nullable: false
          pattern: \d+:\d+
        bonus:
          type: number
          format: float
          example: 5.01
          nullable: true
          minimum: 0.01
          maximum: 99.99
        max:
          type: number
          format: float
          example: 50.99
          nullable: false
          minimum: 0.01
          maximum: 99.99
        price:
          type: number
          format: float
          example: 25.99
          nullable: false
          minimum: 0.01
          maximum: 999.99
        name:
          type: string
          example: $25 Sonnys Controls Gift Card
          nullable: false
          minLength: 1
          maxLength: 50
        sku:
          type: string
          example: 1234598776
          description: A unique identification used to track this inventory item.
          nullable: false
          minLength: 1
          maxLength: 50
        isBogo:
          type: boolean
          example: false
          description: It checks if the item is a BOGO gift card
          nullable: false
        freeItem:
          type: object
          nullable: true
          description: Contains information for the free item of a BOGO gift card
          properties:
            id:
              type: string
              example: '877:1001'
              description: >-
                The unique identification of the free item
            sku:
              type: string
              example: "1705087975"
              description: >-
                The sku of the free item, which will be used in the discountCode field to generate pending order
        locations:
          type: array
          description: >-
            Defines a list of locations where this giftcard is available for
            sale
          nullable: false
          items:
            type: object
            $ref: '#/components/schemas/CarwashLocationObjectShort'

    RecurringPlanObject:
      type: object
      description: >-
        A object to represent a Club Plan (Recurring Plan) that is available to
        be sold through the ecommerce API.
      properties:
        id:
          type: string
          example: '3361:1000'
          description: An unique identifier associated with the object.
          nullable: false
          pattern: \d+:\d+
        price:
          type: number
          format: float
          example: 99.99
          nullable: false
          minimum: 0.01
          maximum: 999.99
        name:
          type: string
          example: Super Wash Unlimited Plan
          nullable: false
          minLength: 1
          maxLength: 50
        sku:
          type: string
          example: 4356876
          nullable: false
          minLength: 1
          maxLength: 50
        lprEnabled:
          type: boolean
          description: Defines if this plan can be redeemed by LPR.
          example: true
          nullable: false
        canBeUpgraded:
          type: boolean
          description: Defines if this plan can be upgraded/downgraded by the user.
          example: true
          nullable: false
        canBeCancelled:
          type: boolean
          description: Defines if this plan can be cancelled by the user.
          example: true
          nullable: false
        isAnnual:
          type: boolean
          description: Defines if this plan is an Annual recurring plan.
          example: false
          nullable: false
        applicableWash:
          type: string
          example: Super Wash
          nullable: false
          minLength: 1
          maxLength: 50
        redemptionIsUnlimited:
          type: boolean
          description: >-
            Will return true if the number of redemptions are unlimited;
            otherwise false.
          example: true
          nullable: false
        redemptionLimit:
          type: integer
          description: Will return the number of redemptions for the limited plans.
          example: 30
          nullable: true
          minimum: 1
          maximum: 30
        hasTrial:
          type: boolean
          description: Defines if this plan has trial price enabled
          example: true
          nullable: false
        trialPrice:
          type: number
          format: float
          example: 78.99
          nullable: true
          minimum: 0.01
          maximum: 99.99
        trialLength:
          type: integer
          description: >-
            Defines the number of months that the trial will be available for
            the plan.
          example: 3
          nullable: true
          minimum: 1
          maximum: 12
        frequencyLimit:
          type: integer
          description: >-
            Defines the maximum number of times this card can be used daily,
            weekly, monthly or yearly.
          example: 3
          nullable: false
          minimum: 1
          maximum: 999999999
        frequencyLimitType:
          type: string
          description: >-
            Defines the period that will be used in combination with the frequency limit value.
          example: 'month'
          nullable: true
        locations:
          type: array
          nullable: true
          description: >-
            Defines a list of locations that this plan will be available for
            sale/redemption
          items:
            type: object
            allOf:
              - $ref: '#/components/schemas/CarWashRecurringLocationObjectShort'

    InventoryRecurringPlanObject:
      description: >-
        An object to represent a Club Plan (Recurring Plan) that is available to be sold through the E-Commerce API.
      allOf:
        - $ref: '#/components/schemas/RecurringPlanObject'
        - type: object
          properties:
            proratedAmount:
              type: number
              format: float
              example: 17.99
              minimum: 0.00
              nullable: false
              description: >-
                The prorated discount amount applied to a Recurring Plan if
                Recurring Plan Billing Day setting is enabled.
            isRecurringBeverage:
              type: boolean
              description:  >-
                Will return true if the current recurring plan is a recurring beverage plan, otherwise false.
              example: true
              nullable: false
            additionalTagPrice:
              type: number
              format: float
              nullable: true
              minimum: 0.00
              description:  >-
                The Additional Tag Price used to increase the price at the next scheduled bill date.
              example: 10.50

    ChangeRecurringPlanOptionObject:
      description: >-
        A object to represent a Club Plan (Recurring Plan) that is available to be upgraded/downgraded.
      allOf:
        - $ref: '#/components/schemas/RecurringPlanObject'
        - type: object
          properties:
            proration:
              type: object
              description: An object to represent the proration data, if any, for a given upgrade/downgrade option.
              nullable: true
              properties:
                planUpgrade:
                  type: number
                  description: >-
                    Defines the amount to be paid today as result of the plan changing.
                  format: float
                  example: 12.99
                  minimum: 0.01
                  maximum: 999.99
                tagUpgrade:
                  type: number
                  description: >-
                    Defines the amount to be paid today for additional tags as result of the plan changing.
                  format: float
                  example: 5.99
                  minimum: 0.01
                  maximum: 999.99
                totalAmount:
                  type: number
                  description: >-
                    Defines the total amount to be paid today for prorating the plan.
                  format: float
                  example: 17.99
                  minimum: 0.01
                  maximum: 999.99

    WashBookObject:
      type: object
      description: Represents a Wash Book that is sold on ecommerce.
      properties:
        id:
          type: string
          example: '45:1001'
          description: An unique identifier associated with the object.
          nullable: false
          pattern: \d+:\d+
        name:
          type: string
          example: The Good Wash
          nullable: false
          minLength: 1
          maxLength: 50
        sku:
          type: string
          example: 1235566
          nullable: false
          description: A unique identification used to track this inventory item.
          minLength: 1
          maxLength: 50
        price:
          type: number
          format: float
          example: 40.99
          nullable: false
          minimum: 0.01
          maximum: 999.99
        redemptionLimit:
          type: integer
          example: 30
          nullable: false
          minimum: 1
          maximum: 30
        applicableWash:
          type: string
          description: Defines the wash that this washbook is allowed to be redeem.
          example: Good Wash
          nullable: false
          minLength: 1
          maxLength: 50
        frequencyLimit:
          type: integer
          description: >-
            Defines the maximum number of times can be used daily, weekly, monthly or yearly.
          example: 3
          nullable: false
          minimum: 1
          maximum: 999999999
        frequencyLimitType:
          type: string
          description: >-
            Defines the period that will be used in combination with the frequency limit value.
          example: 'month'
          nullable: true
        locations:
          type: array
          description: Defines a list of locations where this washbook can be sold/redeemed
          nullable: false
          items:
            type: object
            $ref: '#/components/schemas/CarwashLocationObjectShort'

    PrepaidWashObject:
      type: object
      description: >-
        A object to represent a Wash that is available to be sold through the ecommerce API.
      properties:
        id:
          type: string
          example: '2:1001'
          description: An unique identifier associated with the object.
          nullable: false
          pattern: \d+:\d+
        price:
          type: number
          format: float
          example: 25.99
          nullable: false
          minimum: 0.01
          maximum: 999.99
        applicableWash:
          type: string
          example: BEST WASH
        name:
          type: string
          example: $5 Best Wash
          nullable: false
          minLength: 1
          maxLength: 50
        sku:
          type: string
          example: 1234598776
          description: A unique identification used to track this inventory item.
          nullable: false
          minLength: 1
          maxLength: 50
        locations:
          type: array
          description: >-
            Defines a list of locations where this wash is available for
            sale
          nullable: false
          items:
            type: object
            $ref: '#/components/schemas/CarwashLocationObjectShort'

    TagNumberObject:
      type: object
      description: >-
        Represents an WashBookObject, RFID or Card number associated with a recurring
        or washbook plan.
      properties:
        number:
          type: string
          example: 9870654032190
          nullable: false
        enabled:
          type: boolean
          description: >-
            Will return true if this tag can be used for redeeming an wash;
            otherwise false.
          example: true
          nullable: false

    LicensePlateObject:
      type: object
      description: Represents a car license plate used with an LPR plan.
      properties:
        license:
          type: string
          example: ABC123
          nullable: false
        enabled:
          type: boolean
          description: Will return true when the is active and in use; otherwise false.
          example: true
          nullable: false

    CustomerRecurringAccountObject:
      type: object
      description: Represents a recurring account owned by the customer.
      properties:
        id:
          type: string
          example: '3361:1000'
          nullable: false
          description: An unique identifier associated with the object.
        planName:
          type: string
          example: Ultimate Wash Plan
          nullable: false
          description: The name of the customer club plan (recurring plan).
        allowUpgrade:
          type: boolean
          description: >-
            Will return true if this account can be upgraded or downgraded;
            otherwise false.
          example: true
          nullable: false
        allowCancellation:
          type: boolean
          description: >-
            Will return true if this account can be cancelled by the user;
            otherwise false.
          example: true
          nullable: false
        status:
          type: string
          enum:
            - Active
            - Payment Failed
            - Suspended
            - Expired
            - Cancelled
            - Declined
          example: active
          nullable: false
          description: The current status of the club plan.
        issueDate:
          type: string
          description: Will return a date of when the account was issued.
          example: '2018-08-10'
          nullable: false
        nextBillDate:
          type: string
          description: Will return the date of the next billing.
          example: '2018-09-09'
          nullable: false
        billingAmount:
          type: number
          format: float
          description: Will return the amount to be billed for the account.
          example: 44.95
          nullable: false
        redemptionWashName:
          type: string
          description: The name of the wash that this account redeems.
          example: Ultimate Wash
          nullable: false
        redemptionsLeft:
          type: integer
          nullable: true
          description: >-
            Will return the number of redemptions left; otherwise returns null
            for unlimited plans.
          example: 20
        tags:
          type: array
          nullable: false
          description: Holds a list with all available tags for this account.
          items:
            $ref: '#/components/schemas/TagNumberObject'
        tagProrateActivateAmount:
          type: number
          nullable: false
          description: >-
            The cost of activating a cancelled tag.
          example: 20.00
        tagProrateAdditionalAmount:
          type: number
          nullable: false
          description: >-
            The cost of adding a new tag.
          example: 50.00
        licenses:
          type: array
          nullable: true
          description: Holds a list with all available license plates for this account.
          items:
            $ref: '#/components/schemas/LicensePlateObject'
        isAnnual:
          type: boolean
          nullable: false
          description: Determines is the recurring plan is monthly or annual.
          example: false
        billAmountProrateActivationAccount:
          type: number
          format: float
          nullable: true
          minimum: 0.0
          description: Holds the recurring bill amount if a prorate discount is applied.
          example: 34.95
        proratedDiscountAmountActivationAccount:
          type: number
          format: float
          nullable: true
          minimum: 0.0
          description: Holds the prorated discount amount applied to a recurring billing amount.
          example: -10.00
        nextBillDateAfterProrate:
          type: string
          example: '2021-01-01'
          nullable: true
          description: >-
            The date of the next billing cycle for Recurring Accounts that need to be activated and a proration is needed.
        additionalTagPrice:
          type: number
          format: float
          nullable: true
          minimum: 0.00
          description:  >-
            The Additional Tag Price used to increase the price at the next scheduled bill date.
          example: 10.50

    RecurringAccountActivation:
      description: >-
        A Recurring Account activation response. This resource holds the transaction and prorate information if are
        applied to the activation.
      type: object
      properties:
        transactionNumber:
          type: string
          description: >-
            If the accout requires an initial charge to activate it this holds the transaction number of that charge
          example: 1458969
          nullable: true
        transactionId:
          type: string
          description: >-
            The unique identifier for the transaction if a initial charge is done on the Recurring Account activation.
          example: '1458968:1015'
          nullable: true
          pattern: '^\d+:\d+$'
        subTotal:
          type: number
          format: float
          minimum: 0.0
          example: 19.00
          nullable: true
          description: >-
            Holds the sub-total amount that will be paid in the time of purchase after activate the recurring account.
        totalTax:
          type: number
          format: float
          minimum: 0.0
          example: 1.2
          nullable: true
          description: The amount of taxes being charged to the account activation.
        total:
          type: number
          format: float
          minimum: 0.0
          example: 19.00
          nullable: true
          description: >-
            Holds the total amount that will be paid in the time of purchase after activate the recurring account
            without applying a prorated discount amount.
        proratedDiscountAmount:
          type: number
          format: float
          minimum: 0.0
          example: -8.5
          nullable: true
          description: The prorate discount amount applied to the Recurring Account activation.
        proratedSubTotalAmount:
          type: number
          format: float
          minimum: 0.0
          example: 6.5
          nullable: true
          description: >-
            Holds the sub total amount to be paid in the time of activation after apply a prorated discount amount.

    CustomerWashbookAccountObject:
      type: object
      description: Represents a washbook account owned by the customer.
      properties:
        id:
          type: string
          example: '3361:1000'
        planName:
          type: string
          example: Ultimate WashBook
        status:
          type: string
          enum:
            - Active
            - Cancelled
          example: Active
          nullable: false
          description: The current status of this washbook account.
        issueDate:
          type: string
          description: Will return a date of when the account was issued.
          example: '2018-08-10'
          nullable: false
        redemptionWashName:
          type: string
          description: The name of the wash that this account redeems.
          example: Ultimate Wash
          nullable: false
        redemptionsLeft:
          type: integer
          nullable: true
          description: >-
            Will return the number of redemptions left; otherwise returns null
            for unlimited plans.
          example: 20
        tags:
          type: array
          nullable: false
          description: Holds a list with all available tags for this account.
          items:
            $ref: '#/components/schemas/TagNumberObject'

    CustomerGiftCardAccountObject:
      type: object
      description: Represents a giftcard account owned by the customer.
      properties:
        id:
          type: string
          example: '3361:1000'
        status:
          type: string
          enum:
            - Active
            - Cancelled
          example: Active
          description: The current status of the gift card account.
          nullable: false
        issueDate:
          type: string
          description: Will return a date of when the account was issued.
          example: '2018-08-10'
          nullable: false
        balance:
          type: number
          format: float
          nullable: true
          description: Will return the balance amount left.
          example: 33.45
        cards:
          type: array
          nullable: false
          description: Holds a list with all available tags for this account.
          items:
            $ref: '#/components/schemas/TagNumberObject'


    CustomerRegisterObject:
      type: object
      description: Represents a customer register object. With this registration the api user is allowed to perform action against a customer account.
      properties:
        id:
          type: string
          example: '3361:1000'
        customerToken:
          type: string
          example: asdfafag443fgfdasasdf

    CustomerRegisterRequestObject:
      type: object
      description: This is the request object is the data that will be sent to the customer register endpoint.
      properties:
        email:
          type: string
          example: 'john.doe@sonnys.com'
          nullable: false
          description: >-
            This is the email that will be tied to the customer when registering on the ecomm web.
        productCode:
          type: string
          example: 1234
          description: >-
            This is product code that is tied to the monthly/annual recurring plan. This is the agent of the plan. For example, this can be an RFID number or the License Plate number. You can see example of this in  "/customer/{customer_id}/recurring" reponse - look at the "tags" key.
          nullable: false
        lastFourCreditCard:
          type: string
          example: 1234
          description: >-
            The last four of the customer credit card this is tied to the account.
          nullable: false

    ResetPasswordRequestObject:
      type: object
      description: This is the request object that holds the data that will be sent to the reset password endpoint.
      properties:
        id:
          type: string
          example: '3361:1111'
          nullable: false
          description: >-
            This is the ID of the customer account that will have its password reset to a specified password.
        password:
          type: string
          example: 'password1234'
          description: >-
            This is password that will be set for the specified User.

    UpgradeDowngradeObject:
      type: object
      description: >-
        This object will be used during operations for upgrading or downgrading
        a recurring plan. It represents all of the required fields for a
        upgrade/downgrade operation.
      properties:
        newPlanId:
          type: string
          description: >-
            The unique identifier for the plan that the account will be
            upgraded/downgraded to.
          example: '432:1001'
          nullable: false
          pattern: '^\d+:\d+$'
      required:
        - newPlanId

    UpgradeDowngradeOptionsObject:
      type: object
      description: >-
        This object will be used as a return of available options for upgrading
        or downgrading a plan.
      properties:
        planId:
          type: string
          description: >-
            The unique identifier for the account plan that will be upgraded or
            downgraded.
          example: '876:1004'
          nullable: false

    SuspendAccountOptionsObject:
      type: object
      description: >-
        This object will be used during operations for suspending a recurring plan.
        It represents all of the required fields for suspend operation.
      properties:
        suspended_until_date:
          type: string
          format: date
          pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
          description: >-
            Will hold the date until when the recurring account will be suspended
          example: '2019-07-15'
          nullable: false
      required:
        - suspended_until_date

    PaymentObject:
      type: object
      description: >-
        Provides the user payment information required for purchases and
        recurring plan billing cycles.
      properties:
        billing:
          $ref: '#/components/schemas/PaymentBillingObject'
      required:
        - billing

    AddRfidTagObject:
      type: object
      description: >-
        Add a RFID tag to a recurring plan. This is an alternative to adding a vehicle tag.
      properties:
        tagsToGenerate:
          type: integer
          description: >-
            Hold the number of RFID tags to generate for a given recurring account.
          example: 3
          nullable: false
          minimum: 1
          maximum: 30
      required:
        - tagsToGenerate

    AddVehicleTagObject:
      type: object
      description: >-
        Add a vehicle tag to a recurring plan. This is an alternative to adding a RFID tag.
      properties:
        newTags:
          type: array
          items:
            type: object
            properties:
              licensePlate:
                type: string
                example: PLATE1
              isActive:
                type: boolean
                example: true
            required:
              - licensePlate
              - isActive

    UserRequestObject:
      type: object
      description: >-
        This object represents the information required to handle requests which
        the user information is required. This information will be required for
        all operations that relates to the user such as upgrade/downgrade a
        recurring plan or update the user profile information.
      properties:
        id:
          type: integer
          description: The unique number associated with the customer.
          example: 98745:1002
          nullable: false
        secretToken:
          type: string
          description: >-
            A secretly encoded key that will uniquely identify this customer.
            This functions as a pass-key and it is generated once at the moment
            of the user creation.
          example: f3a484945d3e83717142010f736bc5f1
          nullable: false

    TransTypeObject:
      type: string
      nullable: false
      enum:
        - Sale
        - Return
        - Rewash
      example: Sale
      description: The type of the order that was made.

    TransactionObjectListItemObject:
      type: object
      description: Represent an order summary made by a customer.
      properties:
        receiptNumber:
          type: integer
          example: 253425
          nullable: false
        transId:
          type: string
          example: '876:1001'
          description: A unique identifier required to retrieve the transactions details.
          nullable: false
        transType:
          $ref: '#/components/schemas/TransTypeObject'
        itemCount:
          type: integer
          example: 2
          description: >-
            The number of items on the order. Discounts are counted as an item
            and are included in this count.
          nullable: false
        total:
          type: number
          format: float
          example: 7.99
          description: The total charged for the transaction including discounts and taxes.
          nullable: false
        tenders:
          type: array
          items:
            $ref: '#/components/schemas/Tender'
        date:
          type: string
          example: '2018-05-19 08:45:00'
          description: A UTC datetime of when this transaction was performed.
          nullable: false

    TransactionItemObject:
      type: object
      description: >-
        Will represent an order item. This can be merchandise, washes,
        discounts, etc.
      properties:
        id:
          type: string
          example: '876:1002'
          nullable: false
        name:
          type: string
          example: Basic Wash
          nullable: false
        quantity:
          type: integer
          example: 1
          nullable: false
          description: The count of items purchased for this order groupped by item.
        total:
          type: number
          format: float
          example: 7.99
          nullable: false
        taxRate:
          type: number
          format: float
          example: 0.07
          nullable: false
        additionalFeeRate:
          allOf:
            - $ref: '#/components/schemas/AdditionalFeeRate'
    DiscountMapObjectItemObject:
      type: object
      properties:
        itemId:
          type: string
          example: '888:1001'
          description: The unique identifier of the item that is receiving the discount.
          nullable: false
        discountId:
          type: string
          example: '234:1001'
          description: The unique identifier of the discount item.
          nullable: false
        amountDiscounted:
          type: number
          format: float
          example: 1.25
          nullable: false
          description: The amount of the discount applied to the item.

    DiscountMapObject:
      type: array
      description: >-
        Will hold a map of TransactionItemObjects that has a discount and the amount
        applied.
      nullable: true
      items:
        $ref: '#/components/schemas/DiscountMapObjectItemObject'
    Tender:
      type: object
      properties:
        tender:
          type: string
          enum:
            - Cash
            - Check
            - Visa
            - MasterCard
            - Amex
            - Discover
            - Prepaid
            - Other
          example: Visa
          description: The tender type used for this transaction.
          nullable: false
        amount:
          type: number
          format: float
          example: 7.99
          nullable: false
          description: The amount charged on this tender.

    TransactionObject:
      type: object
      description: Will represent a given customer transaction.
      properties:
        receiptNumber:
          type: integer
          example: 253425
          nullable: false
          description: The order receipt number.
        transId:
          type: string
          example: '876:1001'
          description: A unique identifier required to retrieve the transactions details.
          nullable: false
        transType:
          $ref: '#/components/schemas/TransTypeObject'
          nullabe: false
        itemCount:
          type: integer
          example: 2
          description: The number of items on the transaction discounts included.
          nullable: false
        total:
          type: number
          format: float
          example: 7.99
          description: The total charged for the transaction including discounts and taxes.
          nullable: false
        tenders:
          type: array
          items:
            $ref: '#/components/schemas/Tender'
            nullable: false
        date:
          type: string
          example: '2018-05-19 08:45:00'
          description: A UTC datetime of when this transaction was performed.
          nullable: false
        transItems:
          type: array
          items:
            $ref: '#/components/schemas/TransactionItemObject'
            nullable: false
          description: >-
            A list of order items and discounts that belongs to this
            order/transaction.
        discountItems:
          type: array
          description: >-
            A list of discount items that were applied to the order. This list
            will be filled only if there are discounts applied.
          items:
            $ref: '#/components/schemas/DiscountMapObject'
            nullable: true

    PreOrderItemObject:
      type: object
      description: This object holds summarized information for an order item.
      properties:
        quantity:
          type: integer
          minimum: 1
          maximum: 50
          example: 1
          description: The quantity of items that were purchased with this order.
        id:
          type: string
          pattern: ^\d+\:\d+$
          example: '876:1001'
          description: The unique identifier for the item being added.
        licensePlate:
          type: string
          nullable: true
          pattern: ^[A-Za-z0-9]{3,10}$
          example: ABC123
          description: >-
            The vehicle license will be required for a recurring plan when LPR is enabled.
        isBogo:
          type: boolean
          nullable: false
          example: false
          description: Checks if the item is a BOGO gift card
        freeItemId:
          type: string
          nullable: true
          example: '877:1001'
          description: The unique identifier for the free item included with the BOGO gift card
      required:
        - quantity
        - id

    PreOrderItemDetailedObject:
      type: object
      description: This object holds detailed information for an order item.
      properties:
        quantity:
          type: integer
          example: 1
          nullable: false
          description: The unique identifier for the item being added.
        id:
          type: string
          example: '876:1001'
          description: The unique identifier for the added item.
          nullable: false
        itemAmount:
          type: number
          format: float
          example: 49.99
          nullable: false
        isRecurring:
          type: boolean
          example: true
          nullable: false
          description: >-
            Will return true if the given order item is a recurring plan item;
            otherwise false.
        cycleCharges:
          type: number
          format: float
          example: 49.99
          description: >-
            Will return the amount that will be charged per cycle (month/year)
            if there is an order item that is a recurring plan.
          nullable: true

    PreOrderObject:
      type: object
      description: An order that were made by a customer.
      properties:
        subTotal:
          type: number
          format: float
          example: 99.98
          description: The amount charged before taxes.
          nullable: false
        total:
          type: number
          format: float
          example: 105.96
          description: The amount charged with taxes and discounts included.
          nullable: false
        taxRate:
          type: number
          format: float
          example: 0.06
          description: The tax rate used on this order.
          nullable: false
        taxes:
          type: number
          format: float
          example: 5.98
          description: The amount of taxes being charged for this order.
          nullable: false
        totalChargedPerCycle:
          type: number
          format: float
          example: 99.98
          nullable: true
          description: >-
            Will return the amount that will be charged per cycle
            (monthly/yearly) if one or more of the items of the order is a
            recurring plan.
        nextCycleBillDate:
          type: string
          example: 10/11/2018
          nullable: true
          description: The date of the next billing cycle.
        items:
          type: array
          nullable: false
          items:
            $ref: '#/components/schemas/PreOrderItemDetailedObject'

    PaymentBillingObject:
      type: object
      description: >-
        This object represents the information required to process a credit card
        payment.
      properties:
        cardNumber:
          type: string
          description: The credit card number. Only Visa, MasterCard, American Express and Discover are accepted.
          example: "4111111111111111"
          pattern: ^[\d]{15,16}$
        expMonth:
          type: integer
          description: The 2 digits representing the month for the credit card expiration.
          example: 4
          minimum: 1
          maximum: 12
        expYear:
          type: integer
          description: The 2 digits representing the year for the credit card expiration.
          example: 25
        securityCode:
          type: string
          description: The 3 to 4 digits representing the credit card security code.
          example: "234"
          pattern: ^[\d]{3,4}$
        cardFullName:
          type: string
          description: The credit card owner full name.
          example: John Doe
          minLength: 2
          maxLength: 50
        address:
          description: The credit card billing address.
          $ref: '#/components/schemas/AddressObject'
      required:
        - cardNumber
        - expMonth
        - expYear
        - securityCode
        - cardFullName
        - address

    AbstractOrderObject:
      type: object
      description: This object represents an order being placed.
      properties:
        pendingOrderToken:
          $ref: '#/components/schemas/UniqueToken'
        paymentInfo:
          description: The payment information that will be used to checkout.
          $ref: '#/components/schemas/PaymentBillingObject'
      required:
        - pendingOrderToken
        - paymentInfo

    PaymentInfoObject:
      type: object
      description: This object represents a credit card.
      properties:
        paymentInfo:
          description: The payment information that will be used to checkout.
          $ref: '#/components/schemas/PaymentBillingObject'
      required:
        - paymentInfo

    BillingCustomerObject:
      type: object
      description: >-
        The customer information required to process a shop payment. This information can also be used to create a
        new customer on the proper endpoint.
      properties:
        firstName:
          type: string
          example: John
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          example: Doe
          minLength: 2
          maxLength: 100
        email:
          type: string
          example: jdoe@example.com
          pattern: '[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}'
          maxLength: 64
        phone:
          type: string
          example: "9547204100"
          description: A valid US telephone number.
          nullable: true
          pattern: ^[0-9]{10}$
      required:
        - firstName
        - lastName
        - email

    OrderObject:
      allOf:
        - $ref: '#/components/schemas/AbstractOrderObject'
      type: object
      description: This object represents an order being placed.
      properties:
        customer:
          $ref: '#/components/schemas/BillingCustomerObject'
      required:
        - customer

    ReceiptPaymentReceived:
      type: object
      description: >-
        This object represents the payment information that was used to checkout
        an order for a given customer.
      properties:
        creditCardLastFour:
          type: integer
          example: 1111
          nullable: false
          description: >-
            The last 4 digits of the credit card number. The full credit card
            information is not saved on the system.
        creditCardType:
          type: string
          description: The type of the credit card used for the payment.
          enum:
            - Visa
            - MasterCard
            - Amex
            - Discover
            - Other
          example: Visa
          nullable: false

    ReceiptOrderItemObject:
      type: object
      description: >-
        This object will hold all the information required to print the order
        item on a receipt.
      properties:
        name:
          type: string
          example: Rain-X & Shine Unlimited Plan
          nullable: false
        isRecurring:
          type: boolean
          example: true
          nullable: false
          description: >-
            Will return true if the item is a recurring plan purchased;
            otherwise false.
        isMonthly:
          type: boolean
          example: true
          description: >-
            Will return true if the item is a monthly recurring plan purchased;
            otherwise false. This will return false if the item is not a
            recurring plan.
          nullable: false
        isLprEnabled:
          type: boolean
          example: true
          description: >-
            Will return true if the item is a recurring plan that is LPR
            enabled; otherwise false. This will return false if the item is not
            a recurring plan.
          nullable: false
        licensePlate:
          type: string
          example: ACD341
          nullable: true
          description: >-
            This will return the license plate associated with the item if, only
            if, the item is a recurring plan that is LPR enabled.
        redeemWash:
          type: string
          example: Basic Wash
          nullable: true
          description: >-
            If the item is a recurring plan or washbook it will return the name
            of wash that it can redeem; otherwise null.
        redemptionFrequency:
          type: string
          example: 3 times per day
          nullable: true
          description: >-
            If the item is a recurring plan or washbook it will return the
            frequency which it can be redeemed; otherwise null.
        canBeUpgraded:
          type: boolean
          example: true
          nullable: false
          description: >-
            If the item is a recurring plan it will return true if it can
            upgraded; otherwise false. This also returns false if the order item
            is not an recurring plan.
        canBeDowngraded:
          type: boolean
          example: true
          nullable: false
          description: >-
            If the item is a recurring plan it will return true if it can
            downgraded; otherwise false. This also returns false if the order
            item is not an recurring plan.
        canBeCancelled:
          type: boolean
          example: true
          description: >-
            If the item is a recurring plan it will return true if it can
            canceled; otherwise false. This also returns false if the order item
            is not an recurring plan.
          nullable: false
        sku:
          type: string
          example: 123556798877
          description: The unique SKU associated with the order item.
          nullable: false
        nextBillDate:
          type: string
          example: 11/29/2018
          nullable: true
          description: >-
            Will return the next cycle billing date if the item purchased is a
            recurring plan; otherwise null.
        nextBillAmount:
          type: number
          format: float
          example: 29.99
          nullable: true
          description: >-
            Will return the amount to be charged on the next billing cycle if
            the item purchased is a recurring plan; otherwise null.
        taxRate:
          type: number
          format: float
          example: 0.06
          description: Will hold the tax rate used for this order; otherwise null.
        additionalFeeRate:
          allOf:
            - $ref: '#/components/schemas/AdditionalFeeRate'
        barcode:
          type: string
          example: '421914235'
          nullable: true
          description: >-
            Holds the barcode number for those purchased products for redemption.

    Receipt:
      type: object
      description: >-
        This object represents the information needed to generate an receipt
        after a successful purchase through the ecommerce API.
      properties:
        transNo:
          type: integer
          example: 17692
          description: A unique receipt number.
        barCodeNumber:
          type: string
          example: 'T10140000845215'
          nullable: false
          description: >-
            Use this number to generate a bar code that can be used to redeem
            washes on the carwash paystation or POS. The barcode should use a
            high density linear code C128 with this number.
        completeDate:
          type: string
          example: '10/31/2018 2:21:38'
          description: >-
            Will hold the date of the purchase. This will be a datetime object
            returned in UTC timezone.
        subTotalToday:
          type: number
          format: float
          example: 29.99
          nullable: false
          description: >-
            Will hold the sub-total amount that will was paid in the time of
            purchase.
        taxesToday:
          type: number
          format: float
          example: 0
          description: Will hold the amount of taxes that was paid in the time of purchase.
        additionalFeeToday:
          type: number
          format: float
          example: 2.9
          nullable: true
          description: Will hold the amount of the additional fee paid at the time of purchase.
        totalPaidToday:
          type: number
          format: float
          example: 29.99
          description: >-
            The amount paid at the time of purchase including taxes and
            discounts.
        totalDueNextCycle:
          type: number
          format: float
          example: 29.99
          nullable: true
          description: >-
            Will hold the total amount that will be charged on the next billing
            cycle if the if the order contains at least 1 item that is a
            recurring plan; otherwise it will return null.
        discount:
          type: number
          format: float
          example: -2.2
          nullable: false
          description: >-
            Will hold the discount amount applied to the purchase. If there isn't applied a discount
            it will return null 0.0.
        paymentReceived:
          type: object
          $ref: '#/components/schemas/ReceiptPaymentReceived'
          description: Will hold the payment information used with this order.
        orderItems:
          type: array
          description: A list with all items that were included on the order.
          items:
            type: object
            $ref: '#/components/schemas/ReceiptOrderItemObject'
        redeemLocation:
          type: object
          description: A list composed by the address information of the redeem location.
          allOf:
            - $ref: '#/components/schemas/CarwashLocationObject'
          properties:
            additionalFeeRate:
              $ref: '#/components/schemas/AdditionalFeeRateObject'
    CustomerProfile:
      type: object
      description: This object holds the information required to update a customer profile.
      properties:
        firstName:
          type: string
          description: The customer's first name.
          example: John
          minLength: 2
          maxLength: 50
        lastName:
          type: string
          description: The customer's last name.
          example: Doe
          minLength: 2
          maxLength: 100
        email:
          type: string
          description: The customer's email. Unique value.
          example: john.doe@example.com
          pattern: '[-0-9a-zA-Z.+_]+@[-0-9a-zA-Z.+_]+.[a-zA-Z]{2,4}'
        phone:
          type: string
          example: "9547204100"
          description: A valid US telephone number.
          nullable: true
          pattern: ^[0-9]{10}$
        allowSms:
          type: boolean
          example: true
          nullable: true
          description: >-
            Set this flag to true if you want to opt-in/out the customer for SMS marketing and communication.
            Defaults to true.

    SuspendedAccountObject:
      type: object
      description: Represents data result of suspenging recurring account owned by the customer.
      properties:
        suspended_until:
          type: string
          format: date
          pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
          nullable: false
          description: Will hold the date until when the recurring account will be suspended
          example: 2019-07-15
        active_until_date:
          type: string
          format: date
          pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}$
          nullable: false
          description: Will hold the date until when the recurring account will be active
          example: 2019-07-16

    FoodBeverageObject:
      type: object
      description: An object to represent a Food & Beverage item that is available to be sold through the E-Commerce API.
      properties:
        id:
          type: string
          description: An unique identifier associated with the object.
          nullable: false
          pattern: \d+:\d+
          example: '2:1001'
        sku:
          type: string
          description: A unique identification used to track this inventory item.
          nullable: false
          minLength: 1
          maxLength: 50
          example: 1234598776
        name:
          type: string
          description: The name of the Food & Beverage item.
          nullable: false
          minLength: 1
          maxLength: 64
          example: Beer
        categoryId:
          type: integer
          description: The category identifier to which the Food and Beverage item belongs.
          nullable: false
          example: 20
        departmentId:
          type: integer
          description: The department identifier to which the Food and Beverage item belongs.
          nullable: false
          example: 18
        locations:
          type: array
          description: Defines a list of locations where this Food & Beverage item is available for sale.
          nullable: false
          items:
            type: object
            $ref: '#/components/schemas/CarwashLocationObjectShort'

    AdditionalFeeRate:
      type: number
      format: float
      example: 0.1
      minimum: 0.01
      maximum: 99.99
      nullable: true
      description: Represents the data respective to the additional fee rate.

    AdditionalFeeRateObject:
      type: object
      description: Represents the additional fee information.
      nullable: true
      properties:
        name:
          type: string
          example: "Default Additional Fee"
        rate:
          $ref: '#/components/schemas/AdditionalFeeRate'

    RetailPrice:
      type: number
      format: float
      example: 0.99
      minimum: 0.01
      maximum: 999999999.99
      nullable: true
      description: Represents the data respective to the retail price.

paths:

  /inventory/giftcard:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of gift cards available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of gift cards available to be sold
        on ecommerce. These can be setup through the ecommerce management tool
        on BackOffice.
      operationId: giftCardInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/giftcard', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of giftcard objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/GiftCardObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /inventory/recurring:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of recurring plans available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of recurring plans available to be
        sold on ecommerce. These can be setup through the ecommerce management
        tool on BackOffice.
      operationId: recurringPlansInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/recurring', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of recurring objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/InventoryRecurringPlanObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /inventory/washbook:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of washbooks plans available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of monthly recurring plans
        available to be sold on ecommerce. These can be setup through the
        ecommerce management tool on BackOffice.
      operationId: washBooksInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/washbook', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of washbook objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/WashBookObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /inventory/prepaid-wash:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of prepaid washes available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of prepaid washes available to be sold on ecommerce.
        These can be setup through the
        ecommerce management tool on BackOffice.
      operationId: prepaidWashInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/prepaid-wash', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of prepaid wash objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/PrepaidWashObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /inventory/ingredient:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of ingredients available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of ingredients available to be sold on ecommerce. These can be setup 
        through the ecommerce management tool on BackOffice.
      operationId: ingredientInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/ingredient', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of ingredients objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/FoodBeverageObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /inventory/food:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of food available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of food available to be sold on ecommerce. These can be setup 
        through the ecommerce management tool on BackOffice.
      operationId: foodInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/food', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of food objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/FoodBeverageObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /inventory/beverage:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of beverages available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of beverages available to be sold on ecommerce. These can be setup 
        through the ecommerce management tool on BackOffice.
      operationId: beverageInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/beverage', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of beverages objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/FoodBeverageObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /inventory/recurring-beverage:
    get:
      tags:
        - Inventory
        - Shop
      summary: Returns a list of recurring beverages plans available for sale on ecommerce
      description: >-
        Use this endpoint to retrieve a list of recurring beverages plans available to be
        sold on ecommerce. These can be setup through the ecommerce management tool on BackOffice.
      operationId: recurringBeveragesPlansInventory
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'inventory/recurring-beverage', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of recurring beverages objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/InventoryRecurringPlanObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /locations:
    get:
      summary: Returns a list of available locations and tax for the carwash.
      description: >-
        Use this endpoint to retrieve a list of available locations and each
        location tax information where the products can be purchased or
        redeemed.
      tags:
        - Inventory
      operationId: locations
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'locations', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      responses:
        '200':
          description: A JSON array with a list of carwash location objects.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/CarwashLocationObject'
                        - type: object
                        - nullable: true
                          properties:
                            additionalFeeRate:
                              $ref: '#/components/schemas/AdditionalFeeRateObject'

        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/recurring':
    get:
      summary: >-
        This endpoint will retrieve the recurring plans accounts for a given
        customer.
      description: >-
        Use this endpoint to retrieve a list of recurring plans accounts for a
        given customer.

        ## Testing

          Test your integration before going live using this test information:


          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

      operationId: customerRecurringPlansById
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'customer/4567:1001/recurring', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
      responses:
        '200':
          description: A JSON array with a list of Customer Recurring Accounts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/CustomerRecurringAccountObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/washbook':
    get:
      summary: This endpoint will retrieve the washbook accounts for a given customer.
      description: >-
        Use this endpoint to retrieve a list of washbook accounts for a given
        customer.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

      operationId: customerWashbooksById
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'customer/45678:1001/washbook', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
      responses:
        '200':
          description: A JSON array with a list of Customer WashBookObject Accounts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/CustomerWashbookAccountObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/giftcard':
    get:
      summary: This endpoint will retrieve the giftcard accounts for a given customer.
      description: >-
        Use this endpoint to retrieve a list of giftcard accounts for a given
        customer.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

      operationId: customerGiftCardObjectsById
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'customer/4567:1001/giftcard', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
      responses:
        '200':
          description: A JSON array with a list of Customer GiftCardObject Accounts.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/CustomerGiftCardAccountObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/update:
    post:
      summary: This enpoint should be used to update the customer profile information.
      description: >-
        Use this endpoint to update a customer profile information.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.
          - `Duplicated email`: Use **duplicated@example.com** as `customer.email`.

      operationId: updateCustomerProfile
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/4657:1001/update', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "firstName" => "John",
                "lastName" => "Doe",
                "email" => "jdoe@test.com",
                "phone" => "5615615561"
                "allowSms" => true
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              $ref: '#/components/schemas/CustomerProfile'
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/upgrade:
    post:
      summary: This endpoint will upgrade a given customer recurring account plan.
      description: >-
        Use this endpoint to upgrade a given customer recurring account to a new
        plan. Upgraded plans will be reflected on next billing cycle.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.
          - `Account invalid for upgrade`: Use **3362:999** as `newPlanId`.

      operationId: requestUpgradeCustomerRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/4657:1001/recurring/7894:1002/upgrade', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "newPlanId" => "5577:1001"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeDowngradeObject'
      responses:
        '200':
          description: A JSON object with the transaction data that resulted from a recurring upgrade charge.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      receiptId:
                        type: string
                        example: 76543:1001
                        description: The receipt identifier.
                      transNo:
                        type: integer
                        example: 17692
                        description: A unique receipt number.
                      barCodeNumber:
                        type: string
                        example: T10140000845212
                        description: >-
                          Use this number to generate a bar code that can be used to redeem
                          washes on the carwash paystation or POS. The barcode should use a
                          high density linear code C128 with this number.
                      completeDate:
                        type: string
                        example: '10/31/2018 2:21:38'
                        description: >-
                          Will hold the date of the purchase. This will be a datetime object
                          returned in UTC timezone.
                      subTotalToday:
                        type: number
                        format: float
                        example: 29.99
                        description: >-
                          Will hold the sub-total amount that will was paid in the time of upgrade.
                      taxesToday:
                        type: number
                        format: float
                        example: 0
                        description: Will hold the amount of taxes that was paid in the time of purchase.
                      additionalFeeToday:
                        type: number
                        format: float
                        example: 2.9
                        nullable: true
                        description: Will hold the amount of the additional fee paid at the time of purchase.
                      totalPaidToday:
                        type: number
                        format: float
                        example: 29.99
                        description: >-
                          The amount paid at the time of purchase including taxes and discounts.
                      fromItem:
                        type: object
                        properties:
                          itemId:
                            type: string
                            example: 76543:1001
                            description: The identifier of the old plan.
                          itemName:
                            type: string
                            example: 'Unlimited Basic Plan'
                            description: The name of the old plan.
                      toItem:
                        type: object
                        properties:
                          itemId:
                            type: string
                            example: 76544:1001
                            description: The identifier of the new plan.
                          itemName:
                            type: string
                            example: 'Unlimited Pro Plan'
                            description: The name of the new plan.
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /recurring/{recurring_id}/upgrade:
    post:
      summary: This endpoint will upgrade a given recurring account plan without the customer being registered.
      description: >-
        Use this endpoint to upgrade a given recurring account to a new plan without the customer being registered.
        Upgraded plans will be reflected on next billing cycle.

        ## Testing

          Test your integration before going live using this test information:

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.
          - `Account invalid for upgrade`: Use **3362:999** as `newPlanId`.

      operationId: requestUpgradeRecurringPlanCustomerLessObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'recurring/7894:1002/upgrade', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "newPlanId" => "5577:1001"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeDowngradeObject'
      responses:
        '200':
          description: A JSON object with the transaction data that resulted from a recurring upgrade charge.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      receiptId:
                        type: string
                        example: 76543:1001
                        description: The receipt identifier.
                      transNo:
                        type: integer
                        example: 17692
                        description: A unique receipt number.
                      barCodeNumber:
                        type: string
                        example: T10140000845212
                        description: >-
                          Use this number to generate a bar code that can be used to redeem
                          washes on the carwash paystation or POS. The barcode should use a
                          high density linear code C128 with this number.
                      completeDate:
                        type: string
                        example: '10/31/2018 2:21:38'
                        description: >-
                          Will hold the date of the purchase. This will be a datetime object
                          returned in UTC timezone.
                      subTotalToday:
                        type: number
                        format: float
                        example: 29.99
                        description: >-
                          Will hold the sub-total amount that will was paid in the time of upgrade.
                      taxesToday:
                        type: number
                        format: float
                        example: 0
                        description: Will hold the amount of taxes that was paid in the time of purchase.
                      additionalFeeToday:
                        type: number
                        format: float
                        example: 2.9
                        nullable: true
                        description: Will hold the amount of the additional fee paid at the time of purchase.
                      totalPaidToday:
                        type: number
                        format: float
                        example: 29.99
                        description: >-
                          The amount paid at the time of purchase including taxes and discounts.
                      fromItem:
                        type: object
                        properties:
                          itemId:
                            type: string
                            example: 76543:1001
                            description: The identifier of the old plan.
                          itemName:
                            type: string
                            example: 'Unlimited Basic Plan'
                            description: The name of the old plan.
                      toItem:
                        type: object
                        properties:
                          itemId:
                            type: string
                            example: 76544:1001
                            description: The identifier of the new plan.
                          itemName:
                            type: string
                            example: 'Unlimited Pro Plan'
                            description: The name of the new plan.
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/change-last-24-hrs:
    get:
      summary: >-
        This endpoint will indicate whether a given customer recurring account plan has been updated
        within the last 24 hours.
      description: >-
        This endpoint will indicate whether a given customer recurring account plan has been updated
        within the last 24 hours. A change can be either a Recurring Plan Upgrade or Downgrade.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.
          - `Account invalid for upgrade`: Use **3362:999** as `newPlanId`.
          - `Account suspended: Use 3363:999 as `recurring_id` param in the URL.`.
          - `Account in trial price period: Use 3365:999 as `recurring_id` param in the URL.`.

      operationId: isCustomerRecurringPlanChangedWithinLast24HrsObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'customer/4657:1001/recurring/7894:1002/change-last-24-hrs', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);

            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }

            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions

      responses:
        '200':
          description: >-
            A JSON object with the indicator of whether a Recurring Account has been changed within the last
            24 hrs or not.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      isPlanChangedLast24Hrs:
                        type: boolean
                        example: true
                        description: Indicates if the Recurring Account has been changed within the last 24hrs.
                        nullable: false
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/downgrade:
    post:
      summary: This endpoint will downgrade a given customer recurring account plan.
      description: >-
        Use this endpoint to downgrade a given customer recurring account to a
        new plan. Downgraded plans will be reflected on next billing cycle.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.
          - `Account invalid for downgrade`: Use **3362:999** as `newPlanId`.

      operationId: requestDowngradeCustomerRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/98745:1002/recurring/4567:1001/downgrade', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "newPlanId" => "4561:1001"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeDowngradeObject'
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /recurring/{recurring_id}/downgrade:
    post:
      summary: This endpoint will downgrade a given recurring account plan without the customer being registered.
      description: >-
        Use this endpoint to downgrade a given recurring account to a new plan without the customer being registered.
        Downgraded plans will be reflected on next billing cycle.

        ## Testing

          Test your integration before going live using this test information:

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.
          - `Account invalid for downgrade`: Use **3362:999** as `newPlanId`.

      operationId: requestDowngradeRecurringPlanCustomerLessObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'recurring/4567:1001/downgrade', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "newPlanId" => "4561:1001"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpgradeDowngradeObject'
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/recurring/{recurring_id}/upgrade-options':
    get:
      summary: >-
        This endpoint will retrieve a list of upgrade options for a given
        customer recurring account plan.
      description: >-
        Use this endpoint to retrieve a list of upgrade plans for a given
        customer account.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: customerRecurringPlanObjectUpgradeOptionsByCustomerIdParameterAndPlanId
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'customer/98745:1002/recurring/4561:1001/upgrade-options', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      responses:
        '200':
          description: Will hold a list with all available options for upgrade.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChangeRecurringPlanOptionObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/recurring/{recurring_id}/upgrade-options':
    get:
      summary: >-
        This endpoint will retrieve a list of upgrade options for a given recurring account plan without the 
        customer being registered.
      description: >-
        Use this endpoint to retrieve a list of upgrade plans for a given account without 
        the customer being registered.

        ## Testing

          Test your integration before going live using this test information:

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: recurringPlanObjectUpgradeOptionsCustomerLess
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'recurring/4561:1001/upgrade-options', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      responses:
        '200':
          description: Will hold a list with all available options for upgrade.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChangeRecurringPlanOptionObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/recurring/{recurring_id}/downgrade-options':
    get:
      summary: >-
        This endpoint will retrieve a list of downgrade options for a given
        customer recurring account plan.
      description: >-
        Use this endpoint to retrieve a list of downgrade plans for a given customer account.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: customerRecurringPlanObjectDowngradeOptionsByCustomerIdParameterAndPlanId
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'customer/98745:1002/recurring/4561:1001/downgrade-options', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      responses:
        '200':
          description: Will hold a list with all available options for downgrade.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChangeRecurringPlanOptionObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/recurring/{recurring_id}/downgrade-options':
    get:
      summary: >-
        This endpoint will retrieve a list of downgrade options for a given recurring account plan without the 
        customer being registered..
      description: >-
        Use this endpoint to retrieve a list of downgrade plans for a given account without the customer 
        being registered..

        ## Testing

          Test your integration before going live using this test information:

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: recurringPlanObjectDowngradeOptionsCustomerLess
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'recurring/4561:1001/downgrade-options', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      responses:
        '200':
          description: Will hold a list with all available options for downgrade.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChangeRecurringPlanOptionObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{account_id}/suspend:
    post:
      summary: This endpoint will suspend a given customer recurring account plan.
      description: >-
        Use this endpoint to suspend a given customer recurring account. The account will be suspended immediately until
        the defined day.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Please ensure that you are passing a customer ID (`customer_id`) as a parameter in
          the URL and that it matches the following format: `\d+:\d+`. Example: `customer_id=999:999`

          - `Invalid customer token`: Either the customer token given is invalid or that it was missing from the request.
           The request header `X-Sonnys-Customer-Token` must be present. The customer token is an alfa-numeric string
           unique to the customer.

          Recurring Account
          - `Account not found`: Please ensure that you are passing the account ID (`account_id`) as a parameter in the
             URL and that it matches the following format: `\d+:\d+`, Example: `account_id=999:999`

          - `Account already suspended`: Use **3363:999** as `recurring_id` param in the URL.

      operationId: suspendCustomerRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'

      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/98745:1002/recurring/7894:1001/suspend', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
               'json' => [
                  "suspended_until_date" => "2019-08-01"
                  ]
            ]);

            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SuspendAccountOptionsObject'
      responses:
        '200':
          description: A JSON array with data result of suspending action.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      $ref: '#/components/schemas/SuspendedAccountObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '425':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/cancel:
    post:
      summary: This endpoint will cancel a given customer recurring account plan.
      description: >-
        Use this endpoint to cancel a given customer recurring account. The
        account will be cancelled immediately but should allow redemption till
        the end of the cycle.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: cancelCustomerRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/98745:1002/recurring/7894:1001/cancel', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/recurring/cancel:
    post:
      summary: This endpoint will cancel a given customer recurring account plan without a customer token.
      description: >-
        Use this endpoint to cancel a given customer recurring account. The
        account will be cancelled immediately but should allow redemption till
        the end of the cycle.

      operationId: cancelRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/recurring/cancel', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "productCode" => "ABC123",
                 "recurringId": "203653:1103",
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                productCode:
                  type: string
                  example: "1655097"
                  description:  The agent of recurring account. This can be RIFD number or license plate.
                  nullable: false
                  minLength: 1
                  maxLength: 50
                recurringId:
                  type: string
                  example: "1:999"
                  description: The unique identifier of recurring account.
                  nullable: false
                  pattern: '^\d+:\d+$'
                  minLength: 2
                  maxLength: 50
              required:
                - productCode
                - recurringId
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/retention_discount_apply:
    post:
      summary: This endpoint will apply an available retention discount to a given customer recurring account plan.
      description: >-
        Use this endpoint to apply an available retention discount to a given customer recurring account plan.
        The recurring plan will be discounted at the amount for the `n` amount of month configured in the Back Office.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: applyRetentionDiscountToCustomerRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/98745:1002/recurring/7894:1001/retention_discount_apply', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/retention_discount_availability:
    get:
      summary: >-
        This endpoint will retrieve the availability of a retention discount to be applied to a given customer
        recurring account plan.
      description: >-
        Use this endpoint retrieve the availability of a retention discount to be applied to a given customer
        recurring account plan. The retention discount details will be returned.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: availabilityRetentionDiscountToCustomerRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/98745:1002/recurring/7894:1001/retention_discount_availability', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      responses:
        '200':
          description: >-
            A JSON object holding the retention discount details available to be applied to given customer
            recurring account plan.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      offeringMessage:
                        type: string
                        example: It's a shame that we see you go. Would you like to apply for a discount?
                        description: Holds the offering message to give the user.
                        nullable: false
                      period:
                        type: integer
                        description: >-
                          Indicate the amount of month in which the customer won't be presented again with another
                          retention discount.
                        example: 2
                        nullable: false
                        minimum: 1
                      blackoutPeriod:
                        type: integer
                        description: >-
                          Indicate the amount of month in which the customer is not eligible to take advantage of the
                          retention discount again.
                        example: 12
                        nullable: false
                        minimum: 1
                      retentionDiscountAmount:
                        type: float
                        description: >-
                          Indicate the amount of discount the customer is offered for retention.
                        example: 33.33
                        nullable: false
                        minimum: 1
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/activate:
    post:
      summary: This endpoint will activate a given customer recurring account plan.
      description: >-
        Use this endpoint to activate a given customer recurring account. If the account is previously cancelled or
        declined and its next billing date is outdated then a charge is applied.

        If the Recurring Billing Day setting (Proration) is enabled for the client then a prorated discount is applied.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account already active`: Use **3364:999** as `recurring_id` param in the URL.

      operationId: activateCustomerRecurringPlanObject
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentInfoObject'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/98745:1002/recurring/7894:1001/activate', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "paymentInfo": [
                  "cardNumber": "4111111111111111",
                  "expMonth": 4,
                  "expYear": 25,
                  "securityCode": "234",
                  "cardFullName": "John Doe",
                  "address": [
                    "address1": "5605 Hiatus Rd.",
                    "address2": "",
                    "city": "Tamarac",
                    "state": "FL",
                    "postalCode": "33321",
                    "phone": "9547204100"
                  ]
                ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      responses:
        '200':
          description: >-
            Will activate a recurring account. The account requires an initial charge if it is currently cancelled
            or suspended, and the next billing date is older than the time of activation. Also if the client has the
            Proration enabled is applied a prorated discount amount to the initial charge amount. Otherwise the account
            will be activated without any needed charge.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringAccountActivation'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/update-payment:
    post:
      summary: Will update the payment credit card for a given customer recurring plan.
      description: >-
        Use this endpoint to update the credit card information for a given
        customer recurring account.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

          Validation
          - `Invalid card number`: Use **4242424242424241** as `billing.cardNumber`.
          - `Invalid card security code`: Use **123** as `billing.securityCode`.
          - `Invalid expiration date`: Use any past date.

          Payment
          - `Payment failed`: Use **4000000000000077** as `billing.cardNumber`.

      operationId: updateCustomerRecurringPlanObjectPayment
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/4567:1001/recurring/7894:1002/update-payment', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "billing" => [
                  "cardNumber" => "4111111111111111",
                  "expMonth" => "10",
                  "expYear" => "22",
                  "securityCode" => "111",
                  "cardFullName" => "John Doe",
                  "address" => [
                    "address1" => "5605 Hiatus Rd.",
                    "address2" => "",
                    "city" => "Tamarac",
                    "postalCode" => "33321",
                    "phone" => "5615615561"
                  ]
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentObject'
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /recurring/{recurring_id}/update-payment:
    post:
      summary: Will update the payment credit card for a given recurring plan without the customer being registered.
      description: >-
        Use this endpoint to update the credit card information for a given recurring account without the 
        customer being registered.

        ## Testing

          Test your integration before going live using this test information:

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

          Validation
          - `Invalid card number`: Use **4242424242424241** as `billing.cardNumber`.
          - `Invalid card expiration month`: Use **200** as `billing.expMonth`.
          - `Invalid card expiration year`: Use **123456** as `billing.expYear`.
          - `Invalid card security code`: Use **123** as `billing.securityCode`.
          - `Invalid expiration date`: Use any past date.

          Payment
          - `Payment failed`: Use **4000000000000077** as `billing.cardNumber`.

      operationId: updateRecurringPlanObjectPayment
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'recurring/7894:1002/update-payment', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "billing" => [
                  "cardNumber" => "4111111111111111",
                  "expMonth" => "10",
                  "expYear" => "22",
                  "securityCode" => "111",
                  "cardFullName" => "John Doe",
                  "address" => [
                    "address1" => "5605 Hiatus Rd.",
                    "address2" => "",
                    "city" => "Tamarac",
                    "postalCode" => "33321",
                    "phone" => "5615615561"
                  ]
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentObject'
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/add-rfid-tag:
    post:
      summary: Will add a RFID tag to recurring plan
      description: >-
        Use this endpoint to add a tag to a active recurring plan. A tag
        is a agent of a customers prepaid account. This agent allows them
        to redeem their washes.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: recurringAddRfidTag
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/4567:1001/recurring/7894:1002/add-rfid-tag', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "tagsToGenerate" => 8
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddRfidTagObject'
      responses:
        '200':
          description: Will hold the order id. This id can be used to receive details of transaction
            on the customer orders endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringAddTagResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/add-license-plate:
    post:
      summary: Will add license plate vehicle tag to recurring plan
      description: >-
        Use this endpoint to add a tag to a active recurring plan. A tag
        is a agent of a customers prepaid account. This agent allows them
        to redeem their washes.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: recurringAddVehicleTag
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/4567:1001/recurring/7894:1002/add-license-plate', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "newTags" => [
                  [
               "licensePlate" => "PLATE1",
                "isActive" => true
                  ]
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddVehicleTagObject'
      responses:
        '200':
          description: Will hold the order id. This id can be used to receive details of transaction
            on the customer orders endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringAddTagResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/cancel-tag:
    post:
      summary: Will cancel a tag for active recurring plan.
      description: >-
        Use this endpoint to cancel a tag. This can be either for vehicle tag
        or rfid tag.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: recurringCancelTag
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/4567:1001/recurring/7894:1002/cancel-tag', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "tagNumber" => "1234324"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                tagNumber:
                  type: string
                  example: "123456789"
                  pattern: ^[0-9]{2,64}
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /customer/{customer_id}/recurring/{recurring_id}/activate-tag:
    post:
      summary: Will activate a tag for active recurring plan.
      description: >-
        Use this endpoint to activate a cancelled tag. This can be either for vehicle tag
        or rfid tag.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Recurring
          - `Account not found`: Use **999:999** as `recurring_id` param in the URL.
          - `Account inactive`: Use **3361:999** as `recurring_id` param in the URL.

      operationId: recurringActivateTag
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/RecurringIdParameter'
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'customer/4567:1001/recurring/7894:1002/activate-tag', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "existingTags" => [[
                  "number" => "4111111111111111"
                ]]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Club-Plan-Actions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                existingTags:
                  type: array
                  items:
                    type: object
                    properties:
                      tagNumber:
                        type: string
                        example: "123456789"
                        pattern: ^[0-9]{2,64}
      responses:
        '200':
          description: Will hold the order id. This id can be used to receive details of transaction
            on the customer orders endpoint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringActivateTagResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/orders/{offset}/{limit}':
    get:
      summary: This endpoint will retrieve a list transactions for a given customer.
      description: >-
        Use this endpoint to retrieve a list of transactions for a given
        customer.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

      operationId: customerOrdersListByToken
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'customer/467:1001/orders/1/25', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Orders
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/CollectionLimitParameter'
        - $ref: '#/components/parameters/CollectionOffsetParameter'
      responses:
        '200':
          description: Will hold a list with the transactions for this request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: '#/components/schemas/TransactionObjectListItemObject'
                      offset:
                        type: integer
                        example: 0
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 22
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/profile':
    get:
      summary: This endpoint will retrieve the customer profile.
      description: >-
        Use this endpoint to retrieve the profile for a given customer.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

      operationId: getCustomerProfile
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET', 'customer/467:1001/profile', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
      responses:
        '200':
          description: Will hold information about customer.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      firstName:
                        type: string
                        example: "John"
                        nullable: true
                      lastName:
                        type: string
                        example: "Doe"
                        nullable: true
                      email:
                        type: string
                        example: "johndoe@sonnysdirect.com"
                        nullable: true
                      phone:
                        type: string
                        example: "9541321324"
                        nullable: true
                      address:
                        type: object
                        properties:
                          address:
                            example: "5605 Hiatus Rd"
                            type: string
                            nullable: true
                          city:
                            example: "Tamarac"
                            type: string
                            nullable: true
                          state:
                            example: "FL"
                            type: string
                            nullable: true
                          postal:
                            example: "33321"
                            type: string
                            nullable: true
                          country:
                            example: "United States of America"
                            type: string
                            nullable: true
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/order/{order_id}':
    get:
      summary: This endpoint will retrieve the details of a given customer transaction.
      description: >-
        Use this endpoint to retrieve the details of a given customer
        transaction.

        ## Testing

          Test your integration before going live using this test information:

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Validation
          - `Invalid order id`: Use **999:999** as `order_id` param in the URL.

      operationId: customerOrderDetailsByToken
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'customer/order/details', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
        - Orders
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/OrderIdParameter'
      responses:
        '200':
          description: Will hold an object with the transactions detail.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TransactionObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/register':
    post:
      summary: This endpoint will retrieve an ecomm customer.
      description: >-
        This endpoint will retrieve an ecomm customer and return a token. The ecomm customer must have a recurring plan to register.
        If a customer token already exists for a customer this will create a new token for that customer. In other words, it will perform a update operation
        and deleted the old token and generate a new one.


      operationId: customerRegister
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST',
            '/customer/register', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRegisterRequestObject'
      responses:
        '200':
          description: Will hold an object with the transactions detail.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CustomerRegisterObject'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/reset-password':
    post:
      summary: This endpoint will reset the password of an ecomm user.
      description: >-
        This endpoint will replace the password of a specified user with the specified password.
      

      operationId: resetPassword
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);
            
            $res = $client->request('POST',
            '/customer/reset-password', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json'=> [
                'id' => "3361:1111",
                'password' => "password1234"
              ]
            ]);
            
            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }
            
            $json = $res->getBody();
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequestObject'
      responses:
        '200':
          $ref: '#/components/responses/EmptySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/shop/pending-order':
    post:
      summary: This endpoint will generate a pending order.
      description: >-
        Use this endpoint to process a pending order. It will generate a unique identifier for the order that is
        required on the payment endpoint.

        ## LPR

          When LPR is enabled and the order includes a recurring product, any other product is allowed in the order and the `licensePlate` field is mandatory.


        ## Testing

          Test your integration before going live using this test information:

          - `Success`: Using the example request body with the product ids included on the inventory endpoint examples.
          - `Item not found`: Use a product `id` not included on the inventory endpoints examples.
          - `Site code not found`: Use **SC_NF** as `siteCode` in the request.
          - `Item not available in Site code`: Use **SC_INA** as `siteCode` in the request.
          - `LPR enabled and more than 1 recurring plan`: Use a item `id` **3361:1000** and quantity > 1.
          - `LPR enabled and not license plate`: Use a item `id` **3361:1000** and no `licensePlate` field.
          - `LPR enabled and duplicated license plate`: Use a item `id` **3361:1000** and **DUPLICATED** as `licensePlate`.
          - `Discount code not found on the client`. Use **1603121058** as discountCode value in the request.
          - `Discount code invalid to be applied to the items on the cart`. Use **4343434343** as discountCode value in the request.
          - `Scheduled Date format invalid`. Use **202023-10-11** as scheduledDate value in the request.
          - `Scheduled Date already expired`. Use **2020-12-23T22:00:00.000-0500** as scheduledDate value in the request.

      operationId: checkoutVerifyPriceToBeChargedByToken
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'shop/pending-order',
            [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "siteCode" => "MAIN",
                "orderItems" => [
                  [
                    "quantity" => 1,
                    "id" => "3361:1000",
                    "licensePlate" => "ABC123"
                  ]
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - Shop
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteCode:
                  type: string
                  description: >
                    The location which this account will belong to. This affects
                    billing, taxes, reports and, in some cases, redemptions.
                  example: MAIN
                  minLength: 3
                  maxLength: 6
                discountCode:
                  type: string
                  description: >-
                    The code represents a discount to be applied into the order. If it is not given, discount will not
                    be applied. For BOGO gift card, use the sku of the free item.
                  example: 1603115758
                  nullable: true
                orderItems:
                  type: array
                  description: Will hold a list of items that has been added to the order
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/PreOrderItemObject'
                scheduledDate:
                  type: string
                  pattern: ^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{4}$
                  description: >-
                    Will hold the scheduled date the customer will pick up the purchased non-recurring food 
                    and beverage products. If the order includes a non-recurring food or beverage product the property 
                    is required, otherwise is optional.
                  example: '2023-12-23T22:00:00.000-0500'
                  nullable: true
              required:
                - siteCode
                - orderItems
      responses:
        '200':
          description: Will hold an object with the transactions detail.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/PendingOrder'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/shop/detailed-pending-order':
    post:
      summary: This endpoint will generate a detailed pending order.
      description: >-
        Use this endpoint to process a detailed pending order.
          - It will generate a unique identifier for the order that is required on the payment endpoint.
          - It's returned the time expiration representation of the generates code.
          - It's returned the transaction details of the order based on prorate setting availability.

        ## LPR

          When LPR is enabled and the order includes a recurring product, any other product is allowed in the order and
          the `licensePlate` field is mandatory.

        ## Testing

          Test your integration before going live using this test information:

          - `Success`: Using the example request body with the product ids included on the inventory endpoint examples.
          - `Item not found`: Use a product `id` not included on the inventory endpoints examples.
          - `Site code not found`: Use **SC_NF** as `siteCode` in the request.
          - `Item not available in Site code`: Use **SC_INA** as `siteCode` in the request.
          - `LPR enabled and more than 1 recurring plan`: Use a item `id` **3361:1000** and quantity > 1.
          - `LPR enabled and not license plate`: Use a item `id` **3361:1000** and no `licensePlate` field.
          - `LPR enabled and duplicated license plate`: Use a item `id` **3361:1000** and **DUPLICATED** as `licensePlate`.
          - `Discount code not found on the client`. Use **1603121058** as discountCode value in the request.
          - `Discount code invalid to be applied to the items on the cart`. Use **4343434343** as discountCode value in the request.

      operationId: checkoutVerifyPriceAndTransDataToBeChargedByToken
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'shop/detailed-pending-order',
            [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "siteCode" => "MAIN",
                "orderItems" => [
                  [
                    "quantity" => 1,
                    "id" => "3361:1000",
                    "licensePlate" => "ABC123",
                    "isBogo" => false,
                    "freeItem" => null
                  ]
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - Shop
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                siteCode:
                  type: string
                  description: >
                    The location which this account will belong to. This affects
                    billing, taxes, reports and, in some cases, redemptions.
                  example: MAIN
                  minLength: 3
                  maxLength: 6
                discountCode:
                  type: string
                  description: >-
                    The code that represent a discount to be applied into the order. If is not given is not applied a
                    discount.
                  example: 1603115758
                  nullable: true
                orderItems:
                  type: array
                  description: Will hold a list of items that has been added to the order
                  minItems: 1
                  items:
                    $ref: '#/components/schemas/PreOrderItemObject'
              required:
                - siteCode
                - orderItems
      responses:
        '200':
          description: Will hold an object with the transactions detail.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/DetailedPendingOrder'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/customer/{customer_id}/order/receipt/{receipt_id}':
    get:
      summary: This endpoint will provide the receipt of a processed `customer` payment.
      description: >-
        Use this endpoint to retrieve the receipt of a processed payment.

          ## Testing

          Test your integration before going live using this test information:

         Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

        Validation
         - `Invalid receipt id`: Use **999:999** as `receipt_id` param in the URL.

      operationId: checkoutPaymentReceiptById
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'order/receipt/4567:1001', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - Shop
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
        - $ref: '#/components/parameters/ReceiptIdParameter'
      responses:
        '200':
          description: Will hold an object with the receipt details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Receipt'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  '/order/receipt/{token_id}':
    get:
      summary: This endpoint will provide the receipt of a processed `guest` checkout payment.
      description: >-
        Use this endpoint to retrieve the receipt of a processed guest checkout payment. This resource will be
        available for `15 minutes` from the moment of the request.

        ## Testing

          Test your integration before going live using this test information:

          Validation
          - `Invalid temporary receipt token`: Use **guest_receipt_token_invalid** as `token_id` param in the URL.

      operationId: checkoutPaymentReceiptByToken
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('GET',
            'order/receipt/your-unique-token-hash', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - Shop
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/TokenParameter'
      responses:
        '200':
          description: Will hold an object with the receipt details.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Receipt'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '404':
          $ref: '#/components/responses/EntityNotFoundResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /shop/guest/payment:
    post:
      summary: This endpoint will process a guest payment for a given order.
      description: >-
        Use this endpoint to process the payment for a given guest order. This endpoint will not create a customer entity.

        ## Testing

          Test your integration before going live using this test information:

          - `Success`: Using the example request body.

          Validation
          - `Invalid pending order token`: Use **pending_order_invalid** as `pendingOrderToken`.
          - `No recurring allowed`: Use **pending_order_with_recurring** as `pendingOrderToken`.
          - `Invalid card number`: Use **4242424242424241** as `paymentInfo.cardNumber`.
          - `Invalid card security code`: Use **123** as `paymentInfo.securityCode`.
          - `Invalid expiration date`: Use any past date.

          Payment
          - `Payment failed`: Use **4000000000000077** as `paymentInfo.cardNumber`.

      operationId: performCheckoutPaymentGuest
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'shop/guest/payment', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "pendingOrderToken" => "your_pending_order_hash",
                "paymentInfo": [
                  "cardNumber": "4242424242424242",
                  "expMonth": 4,
                  "expYear": 18,
                  "securityCode": "345",
                  "cardFullName": "John Doe",
                  "address": [
                    "address1": "5605 Hiatus Rd.",
                    "address2": "Main Entrance",
                    "city": "Tamarac",
                    "state": "FL",
                    "postalCode": "33321",
                    "phone": "9547204100"
                  ]
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - Shop
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractOrderObject'
      responses:
        '200':
          description: A JSON object with an url to get the details of a given transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      receiptToken:
                        $ref: '#/components/schemas/UniqueToken'
                      uri:
                        type: string
                        description: The endpoint that should be used to retrieve the guest payment receipt.
                        example: /order/receipt/{token_id}
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /shop/customer/{customer_id}/payment:
    post:
      summary: This endpoint will process the payment for an customer authenticated order.
      description: >-
        Use this endpoint to process the payment for an authenticated customer order.

        ## Testing

          Test your integration before going live using this test information:

          - `Success`: Using the example request body.

          Customer
          - `Customer id not found`: Use **999:999** as `customer_id` param in the URL.
          - `Invalid customer token`: Use **customer-unique-token-invalid** as `X-Sonnys-Customer-Token` header.

          Validation
          - `Invalid pending order token`: Use **pending_order_invalid** as `pendingOrderToken`.
          - `No recurring allowed`: Use **pending_order_with_recurring** as `pendingOrderToken`.
          - `Invalid card number`: Use **4242424242424241** as `paymentInfo.cardNumber`.
          - `Invalid card security code`: Use **123** as `paymentInfo.securityCode`.
          - `Invalid expiration date`: Use any past date.

          Payment
          - `Payment failed`: Use **4000000000000077** as `paymentInfo.cardNumber`.

      operationId: performCheckoutPaymentAuthenticatedCustomer
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'shop/customer/4567:1001/payment', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key',
                'X-Sonnys-Customer-Token' => "f3a484945d3e83717142010f736bc5f1"
              ],
              'json' => [
                "pendingOrderToken" => "your_pending_order_hash",
                "paymentInfo": [
                  "cardNumber": "4111111111111111",
                  "expMonth": 4,
                  "expYear": 18,
                  "securityCode": "345",
                  "cardFullName": "John Doe",
                  "address": [
                    "address1": "5605 Hiatus Rd.",
                    "address2": "Main Entrance",
                    "city": "Tamarac",
                    "state": "FL",
                    "postalCode": "33321",
                    "phone": "9547204100"
                  ]
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - Shop
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
        - $ref: '#/components/parameters/CustomerTokenHeaderParameter'
        - $ref: '#/components/parameters/CustomerIdParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractOrderObject'
      responses:
        '200':
          description: A JSON object with an url to get the details of a given transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        receiptId:
                          type: string
                          example: 76543:1001
                          description: The unique identifier to retrieve the order receipt information.
                          nullable: false
                        uri:
                          type: string
                          description: The endpoint that should be used to retrieve this customer payment receipt.
                          example: /customer/{customer_id}/order/receipt/{receipt_id}
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'

  /shop/payment:
    post:
      summary: This endpoint will process the payment for a given order and create the customer.
      description: >-
        Use this endpoint to process the payment for a given order and create the customer with the information provided on the payment.

        ## Testing

          Test your integration before going live using this test information:

          - `Success`: Using the example request body.

          Validation
          - `Duplicated email`: Use **duplicated@example.com** as `customer.email`.
          - `Invalid pending order token`: Use **pending_order_invalid** as `pendingOrderToken`.
          - `No recurring allowed`: Use **pending_order_with_recurring** as `pendingOrderToken`.
          - `Invalid card number`: Use **4242424242424241** as `paymentInfo.cardNumber`.
          - `Invalid card security code`: Use **123** as `paymentInfo.securityCode`.
          - `Invalid expiration date`: Use any past date.

          Payment
          - `Payment failed`: Use **4000000000000077** as `paymentInfo.cardNumber`.

      operationId: performCheckoutPaymentNewCustomer
      x-code-samples:
        - lang: PHP
          source: >
            $client = new GuzzleHttp\Client(['base_uri' =>
            'https://sandboxapi.mywashaccount.com/v1']);

            $res = $client->request('POST', 'shop/payment', [
              'headers' => [
                'Accept'     => 'application/json',
                'X-Sonnys-API-ID' => 'my-sonnys-api-id',
                'X-Sonnys-API-Key' => 'my-specific-api-Key'
              ],
              'json' => [
                "pendingOrderToken" => "your_pending_order_hash",
                "paymentInfo": [
                  "cardNumber": "4111111111111111",
                  "expMonth": 4,
                  "expYear": 18,
                  "securityCode": "345",
                  "cardFullName": "John Doe",
                  "address": [
                    "address1": "5605 Hiatus Rd.",
                    "address2": "Main Entrance",
                    "city": "Tamarac",
                    "state": "FL",
                    "postalCode": "33321",
                    "phone": "9547204100"
                  ]
                ],
                "customer": [
                  "firstName": "John",
                  "lastName": "Doe",
                  "email": "jdoe@example.com",
                  "phone": "5615615561"
                ]
              ]
            ]);


            if ($res->getStatusCode() !== '200') {
              throw new Exception('An error has occurred');
            }


            $json = $res->getBody();
      tags:
        - Shop
      parameters:
        - $ref: '#/components/parameters/ApiKeyHeaderParameter'
        - $ref: '#/components/parameters/ApiIdHeaderParameter'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderObject'
      responses:
        '200':
          description: A JSON object with an url to get the details of a given transaction.
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        customerId:
                          type: string
                          example: 876:999
                          description: >-
                            Will return a unique customer identifier if a customer is created.
                          nullable: true
                        secretToken:
                          type: string
                          example: f3a484945d3e83717142010f736bc5f1
                          nullable: true
                          description: A secret password token that should be used with customer operations.
                        receiptId:
                          type: string
                          example: 76543:1001
                          description: The unique identifier to retrieve the order receipt information.
                          nullable: false
                        uri:
                          type: string
                          description: The endpoint that should be used to retrieve this customer payment receipt.
                          example: /customer/{customer_id}/order/receipt/{receipt_id}
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '403':
          $ref: '#/components/responses/NotAuthorizedResponse'
        '422':
          $ref: '#/components/responses/PayloadValidationErrorResponse'
        '429':
          $ref: '#/components/responses/RateExceededResponse'
        '500':
          $ref: '#/components/responses/ServerErrorResponse'